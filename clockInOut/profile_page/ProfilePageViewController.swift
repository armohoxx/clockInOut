//
//  ProfilePageViewController.swift
//  clockInOut
//
//  Created armyxx on 17/12/2564 BE.
//  Copyright © 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Kingfisher

class ProfilePageViewController: UIViewController, ProfilePageViewProtocol {

	var presenter: ProfilePagePresenterProtocol?
    var imagePicker: UIImagePickerController!
    
    @IBOutlet weak var firstNameField: UITextField!
    @IBOutlet weak var lastNameField: UITextField!
    @IBOutlet weak var uidField: UITextField!
    @IBOutlet weak var buttonChangePassword: UIButton!
    @IBOutlet weak var buttonDeleteAccount: UIButton!
    @IBOutlet weak var profileImageView: UIImageView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        title = "Profile"
        
        self.navigationItem.leftBarButtonItem = UIBarButtonItem(
            title: "Back", style: .plain, target: self, action: #selector(didTapProfile))
        self.setUpImageTap()
        self.presenter?.notifyDataFromFirestore()
        self.presenter?.notifyProfileImage()
    }
    
    func showProfileImage(image_profile: String) {
        
        DispatchQueue.main.async {
            if !image_profile.isEmpty {
                guard let urlImageProfile = URL(string: image_profile) else { return }
                
                self.profileImageView.kf.setImage(with: urlImageProfile) { result in
                    switch result {
                    case .success(let value):
                        print("get images \(value.source)")
                        self.profileImageView.image = value.image
                    case .failure(let error):
                        print(error)
                    }
                }
            } else {
                self.profileImageView.image = UIImage(named: "add_profile")
            }
          
        }
    }
    
    func showImagePickerControlActionSheet() {
        let photoLibraryAction = UIAlertAction(title: "Choose from library", style: .default) { (action) in
            self.setUpImagePicker(sourceType: .photoLibrary)
        }
        let cameraAction = UIAlertAction(title: "Take from Camera", style: .default) { (action) in
            self.setUpImagePicker(sourceType: .camera)
        }
        let cancelAction = UIAlertAction(title: "Cancel", style: .cancel, handler: nil)
        
        AlertService.showAlert(style: .actionSheet, title: "Choose your image", message: nil, actions: [photoLibraryAction, cameraAction, cancelAction], completion: nil)
    }
    
    func setUpImagePicker(sourceType: UIImagePickerController.SourceType) {
        imagePicker = UIImagePickerController()
        imagePicker.allowsEditing = true
        imagePicker.sourceType = sourceType
        imagePicker.delegate = self
        present(imagePicker, animated: true, completion: nil)
    }
    
    private func setUpImageTap() {
        let imageTap = UITapGestureRecognizer(target: self, action: #selector(openImagePicker))
        profileImageView.isUserInteractionEnabled = true
        profileImageView.addGestureRecognizer(imageTap)
        profileImageView.layer.cornerRadius = profileImageView.frame.size.width / 2
        profileImageView.clipsToBounds = true
        
    }
    
    @objc func openImagePicker() {
        self.showImagePickerControlActionSheet()
    }
    
    @objc func didTapProfile() {
        self.presenter?.notifyRouteMenu()
    }
    
    @IBAction func didTapChangePassword(_ sender: UIButton) {
        self.showResetPasswordAlert()
    }
    
    @IBAction func didTapDeleteAccount(_ sender: UIButton) {
        self.showConfirmDeleteAlert()
    }
    
    func showUserData(firstname: String, lastname: String, uid: String) {
        DispatchQueue.main.async {
            self.firstNameField.text = firstname
            self.lastNameField.text = lastname
            self.uidField.text = uid
        }
    }
    
    func showAlert(title: String, message: String) {
        let alertController = UIAlertController(title: title,
                                                message: message,
                                                preferredStyle: .alert)
        
        let okAction = UIAlertAction(title: "OK",
                                         style: .cancel,
                                         handler: nil)
        
        alertController.addAction(okAction)
        self.present(alertController, animated: true, completion: nil)
    }
    
    func showDeleteSuccessAlert(title: String, message: String) {
        let alertController = UIAlertController(title: title,
                                                message: message,
                                                preferredStyle: .alert)
        
        let okAction = UIAlertAction(title: "OK",
                                     style: .default,
                                     handler: { _ in
            self.presenter?.getLogout()
        })
        
        alertController.addAction(okAction)
        self.present(alertController, animated: true, completion: nil)
    }
    
    func showErrorAlert(error: Error?) {
        guard error == nil else {
            let alertController = UIAlertController(title: "Someting Wrong",
                                                    message: "\(error!.localizedDescription)",
                                                    preferredStyle: .alert)
            
            let okAction = UIAlertAction(title: "OK",
                                             style: .cancel,
                                             handler: nil)
            
            alertController.addAction(okAction)
            self.present(alertController, animated: true, completion: nil)
            return
        }
    }
    
    func showResetPasswordAlert() {
        let alertController = UIAlertController(title: "Reset Password",
                                                message: "",
                                                preferredStyle: .alert)
        
        let cancelAction = UIAlertAction(title: "Cancel", style: .cancel, handler: nil)
        
        let confirmAction = UIAlertAction(title: "Continue", style: .default, handler: { _ in
            guard let fieldEmail = alertController.textFields, fieldEmail.count == 1 else {
                return
            }
            
            let resetEmailField = fieldEmail[0]
            
            self.presenter?.notifyResetPassword(email: resetEmailField.text!)
        })
        
        alertController.addTextField { field in
            field.placeholder = "Please enter your email"
            field.returnKeyType = .continue
            field.keyboardType = .emailAddress
        }
        
        alertController.addAction(cancelAction)
        alertController.addAction(confirmAction)
        
        self.present(alertController, animated: true, completion: nil)
    }
    
    func showConfirmDeleteAlert() {
        let alertController = UIAlertController(title: "Confirm Delete",
                                                message: #"Please fill "ConfirmDelete" "#,
                                                preferredStyle: .alert)
        
        let cancelAction = UIAlertAction(title: "Cancel", style: .cancel, handler: nil)
        
        let confirmAction = UIAlertAction(title: "Continue", style: .default, handler: { _ in
            guard let fieldConfirmDelete = alertController.textFields, fieldConfirmDelete.count == 1 else {
                return
            }
            
            let confirmDeleteField = fieldConfirmDelete[0]
            
            self.presenter?.notifyConfirmDelete(confirmDelete: confirmDeleteField.text!)
        })
        
        alertController.addTextField { field in
            field.returnKeyType = .continue
            field.keyboardType = .default
        }
        
        alertController.addAction(cancelAction)
        alertController.addAction(confirmAction)
        
        self.present(alertController, animated: true, completion: nil)
    }
}

extension ProfilePageViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
        picker.dismiss(animated: true, completion: nil)
    }
    
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        
        if let pickedImage = info[UIImagePickerController.InfoKey.editedImage] as? UIImage {
            self.profileImageView.image = pickedImage
        }
        
        picker.dismiss(animated: true, completion: nil)
    }
}
